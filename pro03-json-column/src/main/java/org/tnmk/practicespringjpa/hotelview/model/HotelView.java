package org.tnmk.practicespringjpa.hotelview.model;


import org.tnmk.practicespringjpa.hotelview.model.converter.AlternateCodesConverter;
import org.tnmk.practicespringjpa.hotelview.model.converter.MultiLanguageMetadataMapConverter;
import org.tnmk.practicespringjpa.samplebusiness.entity.columnconverter.TrackedEntity;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * The main fields in this entity were reused from IdsClientPropertyMap in the old system (VizzlyL1).
 * The logic identifier fields of this entity is the composition of {@link #COL_ACCOUNT_UUID} and {@link #COL_HOTEL_VIEW_ID}.
 * <p>
 * Created by mick on 18/06/18.
 */
@Entity
@Table(name = "hotel_view"
    , catalog = "hotel_management_db"
    , uniqueConstraints = @UniqueConstraint(columnNames = {HotelView.COL_ACCOUNT_UUID, HotelView.COL_HOTEL_VIEW_ID})
)
public class HotelView extends TrackedEntity {
    protected static final String COL_ACCOUNT_UUID = "account_uuid";
    protected static final String COL_HOTEL_VIEW_ID = "hotel_view_id";

    /**
     * In the old system, it was 'oid_ids_client_property_map'
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "oid_hotel_view", nullable = false, unique = true)
    private Long oidHotelView;

    /**
     * In the old system, it was 'ids_client_property_id' (IPID).<br/>
     * It is neither the {@link HotelView#oidHotelView} nor the uuid.<br/>
     * This is the ID of hotel property which was generated by our client.<br/>
     * <p/>
     * Therefore, different clients could coincident use the same id for different hotels.
     * That's why the {@link #hotelViewId} is not unique, but the combination between {@link #hotelViewId} and {@link #accountUuid} is unique.
     */
    @Column(name = COL_HOTEL_VIEW_ID, nullable = false, updatable = false)
    private String hotelViewId;

    /**
     * In the old system, it was 'oid_ids_client'
     */
    @Column(name = COL_ACCOUNT_UUID, nullable = false, updatable = false)
    private String accountUuid;

    /**
     * In the old system, it was 'oid_property_client' (PID)
     * This is the id of hotel view which is generated internally by ourselves company.
     * So it would be unique for the whole system.
     * However, there are some hotel properties which will not be managed in our systems (for example: you cannot use VScape to manage their media files)
     * Those hotel properties will have id 0 in our system (so we cannot set unique=true on this field).
     * //TODO Or maybe we just set them null, and then set unique=true?
     * //TODO when this id will be generated?
     */
    @Column(name = "internal_hotel_view_id", length = 11, nullable = false, columnDefinition = "int default 0")
    private Integer internalHotelViewId;

    /**
     * In the old system, it was 'oid_ids_client_property_status'.
     * The data in ids_client_property_map.oid_ids_client_property_status are all either null or 0.
     * <p/>
     * There was a table with the same name 'ids_client_property_status', but there's no data on it, and also there's no Foreign Key configured.
     * So I guess that table is not used any more, and we just store the status directly in this field?
     * <p/>
     * <b>Note:</b>
     * I also see the column 'mapping_status' in the table 'ids_client_property_map' DB, but don't see any corresponding field in the IdsClientPropertyMap entity.
     * It's data are blank, or 'unknown', or 'posted', or 'accept'.
     * TODO please let me know if we really need it or not? And what's the real meaning of this field?
     */
    @Column(name = "status")
    private Short status;

    @Column(name = "distribution_method")
    private String distributionMethod;

    /**
     * TODO We are using the term 'hotel' instead of the term 'property'? And the term 'hotel' here has a general meaning about the hotel. It could be talking about an enterprise hotel chain or also an individual property.
     * Please let me know if I understand it incorrectly!
     * <p>
     * In the old system, it was 'property_name'.
     */
    @Column(name = "hotel_name", length = 128)
    private String hotelName;

    /**
     * In the old system, it was 'property_line'.
     */
    @Column(name = "hotel_line", length = 128)
    private String hotelLine;

    @Column(name = "mapping_action")
    private String mappingAction;

    @Column(name = "mapping_method")
    private String mappingMethod;

    @Column(name = "mapping_datetime")
    @Temporal(TemporalType.TIMESTAMP)
    private Date mappingDatetime;

    @Column(name = "url_action", length = 128)
    private String urlAction;

    @Column(name = "url_action_text", length = 60)
    private String urlActionText;


    @Column(name = "processing_status", length = 10)
    private String processingStatus;

    /**
     * view more at {@link #active}
     */
//    @Column(name = "marked_for_delete", nullable = false)
//    private boolean markedForDelete = false;

    /**
     * We just apply the soft deletion for this entity.
     * This field is used to indicate whether the HotelView is deleted or not.
     * <p/>
     * In the old system, there 2 columns: 'markedForDelete' & 'active'.<br/>
     * But all the queries related to 'active' (e.g. FIND_ALL_ACTIVE_UNMAPPED_AUTOMAPPED_ICPM) only executed with the condition "markedForDeleted = false".<br/>
     * So I guess the old 'active' field was not used anymore.<br/>
     * Therefore, in the new system, we may want to use either 'active' or 'markedAsDelete' for that soft deletion concept.<br/>
     * Don't use both fields, it will cause confusion.<br/>
     * TODO Please let me know if I understand it correctly.
     */
    @Column(name = "active", nullable = false)
    private boolean active = true;

    @Column(name = "address1", length = 128)
    private String address1;

    @Column(name = "address2", length = 128)
    private String address2;

    @Column(name = "city", length = 64)
    private String city;

    @Column(name = "state", length = 64)
    private String state;

    @Column(name = "country", length = 64)
    private String country;

    @Column(name = "zip", length = 20)
    private String zip;

    @Column(name = "latitude")
    private BigDecimal latitude;

    @Column(name = "longitude")
    private BigDecimal longitude;

    @Column(name = "phone", length = 100)
    private String phone;

    @Column(name = "fax", length = 100)
    private String fax;

    @Column(name = "price_band", length = 20)
    private String priceBand;

    @Column(name = "star_rating", length = 20)
    private String starRating;

    @Column(name = "amenities_list", length = 255)
    private String amenitiesList;


    @Column(name = "brand", length = 128)
    private String brand;

    @Column(name = "owner", length = 128)
    private String owner;

    @Column(name = "operator", length = 128)
    private String operator;

    @Column(name = "text_info", length = 255)
    private String textInfo;

    @Column(name = "free_text_1", length = 255)
    private String freeText1;

    /**
     * TODO I'm not so sure what is it???
     * The original column in the old system was 'update_uid'
     * Some example data: 'propUpdateMatch', 'cdms1603idclprma', 'excc_85789'.
     * It looks like the application which updated this data.
     */
    @Column(name = "update_source", length = 20)
    private String updateSource;

    // below -- added for ddl generation
    //TODO not sure we need it
    @Column(name = "loaded_datetime")
    @Temporal(TemporalType.TIMESTAMP)
    private Date loadedDatetime;

    //TODO not sure we need it
    @Column(name = "last_loaded_datetime")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastLoadedDatetime;

    /**
     * The key is the locale.
     * <p>
     * In most of multi-language use cases, working with Map is easier to working with List.
     * However, I'm not sure what we are going to do with this data.
     * If you think this is just used to store data, we don't need any process on it, and the {@link List} is more appropriate, please let me know.
     * <p>
     * In old system, it's @Transient 'List<IdsClientPropertyMapML> idsClientPropertyMapMLs'
     */
    @Column(name = "multi_language_metadata", columnDefinition = "JSON")
    @Convert(converter = MultiLanguageMetadataMapConverter.class)
    private Map<String, MultiLanguageMetadata> multiLanguageMetadata;

    /**
     * In the old system, it's @Transient ' List<IdsClientPropertyAlternateId> alternateIds'
     */
    @Column(name = "alternate_codes", columnDefinition = "JSON")
    @Convert(converter = AlternateCodesConverter.class)
    private List<AlternateCode> alternateCodes = new ArrayList<>();


    //FIELDS IN THE OLD CODE WHICH I THINK WE MAY NOT NEED FOR NOW. PLEASE HELP TO REVIEW
    /**
     * TODO For now, we just need {@link distributionMethod}, and this field is not used yet?
     */
//    @Column(name = "oid_distribution_profile")
//    private Integer oidDistributionProfile;//distributionProfileId?

    //TODO The chain information, maybe we need them now?
    // don't do the join in JPA since there's a lot of 0 oids and Hibernate would do a query one by one to check them
//    @Column(name = "oid_ids_chain")
//    private Integer oidIdsChain;//chainId

//    //chainName from rcodb.chain table if oid_ids_chain exists for icpm record
//    TODO It's transient, so it's used for only business model? Do we need it here? We should separate the business model and the DB entity.
//    @Transient
//    private String chainName;

    /**
     * TODO It was "suggested_oid_property_client", looks like not used.
     * That field was created in the old DB, but the Java field in the entity didn't have any getter/setter and was not used anywhere!
     */
//    private Integer suggestedInternalHotelViewId;

    //TODO Not sure when we need it
//    @Column(name = "oid_geo_code_source")
//    private Integer oidGeoCodeSource;

//    //Added for Property Syndication, no need to grab the Property Client. make lazy because only used for Syndication
//    @OneToOne(fetch = FetchType.LAZY)
//    @JoinColumns({
//        @JoinColumn(name = "oid_ids_client", updatable = false, insertable = false),
//        @JoinColumn(name = "ids_client_property_id", updatable = false, insertable = false)
//    })
//    @NotFound(action = NotFoundAction.IGNORE)
//    @org.hibernate.annotations.ForeignKey( name = "none" )
//    private MediaDistribution mediaDistribution;//Only for Sabre Syndication
//
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "oid_property_client", updatable = false, insertable = false)
//    @NotFound(action = NotFoundAction.IGNORE)
//    @org.hibernate.annotations.ForeignKey( name = "none" )
//    private ContentStats contentStats;//Only for Sabre Syndication


//    @OneToOne(fetch = FetchType.LAZY)
//    @PrimaryKeyJoinColumn
//    private IdsClientPropertyMapStandardized icpmStandardized;//Is it the same as Normalized Hotel???,
//      the fields inside it looks duplicated to below standardized fields.

    //TODO we don't have matching now.
//    //make this OneToMany so it'll be lazy, since Hibernate can't do lazy OneToOne
//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "idsClientPropertyMap", cascade = CascadeType.PERSIST)
//    private List<MatchPossibleState> matchPossibleStates;

    //In the old system, there are so many @Transient fields which are used for DeltaIdentification, Standardized Data which I didn't included here.

    //SPECIFIC CLIENTS FIELDS: BEGIN //////////////////////////////
    //TODO May not need them yet
//    @Column(name = "isis_code", length = 20)
//    private String isisCode;
//
//    @Column(name = "pegasus_code", length = 50)
//    private String pegasusCode;
//
//    @Column(name = "sabre_code", length = 50)
//    private String sabreCode;
//
//    @Column(name = "amadeus_code", length = 50)
//    private String amadeusCode;
//
//    @Column(name = "galileo_code", length = 50)
//    private String galileoCode;
//
//    @Column(name = "worldspan_code", length = 50)
//    private String worldspanCode;

    //SPECIFIC CLIENTS FIELDS: END //////////////////////////////
    public Long getOidHotelView() {
        return oidHotelView;
    }

    public void setOidHotelView(Long oidHotelView) {
        this.oidHotelView = oidHotelView;
    }

    public String getHotelViewId() {
        return hotelViewId;
    }

    public void setHotelViewId(String hotelViewId) {
        this.hotelViewId = hotelViewId;
    }

    public String getAccountUuid() {
        return accountUuid;
    }

    public void setAccountUuid(String accountUuid) {
        this.accountUuid = accountUuid;
    }

    public Integer getInternalHotelViewId() {
        return internalHotelViewId;
    }

    public void setInternalHotelViewId(Integer internalHotelViewId) {
        this.internalHotelViewId = internalHotelViewId;
    }

    public Short getStatus() {
        return status;
    }

    public void setStatus(Short status) {
        this.status = status;
    }

    public String getDistributionMethod() {
        return distributionMethod;
    }

    public void setDistributionMethod(String distributionMethod) {
        this.distributionMethod = distributionMethod;
    }

    public String getHotelName() {
        return hotelName;
    }

    public void setHotelName(String hotelName) {
        this.hotelName = hotelName;
    }

    public String getMappingAction() {
        return mappingAction;
    }

    public void setMappingAction(String mappingAction) {
        this.mappingAction = mappingAction;
    }

    public String getMappingMethod() {
        return mappingMethod;
    }

    public void setMappingMethod(String mappingMethod) {
        this.mappingMethod = mappingMethod;
    }

    public Date getMappingDatetime() {
        return mappingDatetime;
    }

    public void setMappingDatetime(Date mappingDatetime) {
        this.mappingDatetime = mappingDatetime;
    }

    public String getUrlAction() {
        return urlAction;
    }

    public void setUrlAction(String urlAction) {
        this.urlAction = urlAction;
    }

    public String getUrlActionText() {
        return urlActionText;
    }

    public void setUrlActionText(String urlActionText) {
        this.urlActionText = urlActionText;
    }

    public String getProcessingStatus() {
        return processingStatus;
    }

    public void setProcessingStatus(String processingStatus) {
        this.processingStatus = processingStatus;
    }


    public String getAddress1() {
        return address1;
    }

    public void setAddress1(String address1) {
        this.address1 = address1;
    }

    public String getAddress2() {
        return address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public BigDecimal getLatitude() {
        return latitude;
    }

    public void setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
    }

    public BigDecimal getLongitude() {
        return longitude;
    }

    public void setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getFax() {
        return fax;
    }

    public void setFax(String fax) {
        this.fax = fax;
    }

    public String getPriceBand() {
        return priceBand;
    }

    public void setPriceBand(String priceBand) {
        this.priceBand = priceBand;
    }

    public String getStarRating() {
        return starRating;
    }

    public void setStarRating(String starRating) {
        this.starRating = starRating;
    }

    public String getAmenitiesList() {
        return amenitiesList;
    }

    public void setAmenitiesList(String amenitiesList) {
        this.amenitiesList = amenitiesList;
    }

    public String getHotelLine() {
        return hotelLine;
    }

    public void setHotelLine(String hotelLine) {
        this.hotelLine = hotelLine;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public String getOperator() {
        return operator;
    }

    public void setOperator(String operator) {
        this.operator = operator;
    }

    public String getTextInfo() {
        return textInfo;
    }

    public void setTextInfo(String textInfo) {
        this.textInfo = textInfo;
    }

    public String getFreeText1() {
        return freeText1;
    }

    public void setFreeText1(String freeText1) {
        this.freeText1 = freeText1;
    }

    public String getUpdateSource() {
        return updateSource;
    }

    public void setUpdateSource(String updateSource) {
        this.updateSource = updateSource;
    }

    public Date getLoadedDatetime() {
        return loadedDatetime;
    }

    public void setLoadedDatetime(Date loadedDatetime) {
        this.loadedDatetime = loadedDatetime;
    }

    public Date getLastLoadedDatetime() {
        return lastLoadedDatetime;
    }

    public void setLastLoadedDatetime(Date lastLoadedDatetime) {
        this.lastLoadedDatetime = lastLoadedDatetime;
    }

    public Map<String, MultiLanguageMetadata> getMultiLanguageMetadata() {
        return multiLanguageMetadata;
    }

    public void setMultiLanguageMetadata(Map<String, MultiLanguageMetadata> multiLanguageMetadata) {
        this.multiLanguageMetadata = multiLanguageMetadata;
    }

    public List<AlternateCode> getAlternateCodes() {
        return alternateCodes;
    }

    public void setAlternateCodes(List<AlternateCode> alternateCodes) {
        this.alternateCodes = alternateCodes;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }
}
